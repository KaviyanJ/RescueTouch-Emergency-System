/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "lcd.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
uint8_t rxData[1];
uint8_t tx_buff[]={1}; //ABCDEFGHIJ in ASCII code
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  // Lcd_PortType ports[] = { D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port };
  //Lcd_PortType ports[] = { GPIOC, GPIOB, GPIOA, GPIOA };
  // Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
  //Lcd_PinType pins[] = {GPIO_PIN_7, GPIO_PIN_6, GPIO_PIN_7, GPIO_PIN_6};
  //Lcd_HandleTypeDef lcd;
  // Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
  //lcd = Lcd_create(ports, pins, GPIOB, GPIO_PIN_5, GPIOB, GPIO_PIN_4, LCD_4_BIT_MODE);
  //Lcd_cursor(&lcd, 0,0);
  //Lcd_string(&lcd, A);
    //for ( int x = 1; x <= 200 ; x++ )
    //{
      //Lcd_cursor(&lcd, 1,0);
      //Lcd_int(&lcd, x);
      //HAL_Delay (1000);
    //}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  int stateSend = 0;
  int sending = 0;

  void LCD_Display(char message[], char messageTwo[])
  {

	  Lcd_PinType pins[] = { GPIO_PIN_7, GPIO_PIN_6, GPIO_PIN_7, GPIO_PIN_6 };
      Lcd_PortType ports[] = { GPIOC, GPIOB, GPIOA, GPIOA };
      Lcd_HandleTypeDef lcd;
      lcd = Lcd_create(ports, pins, GPIOB, GPIO_PIN_5, GPIOB, GPIO_PIN_4, LCD_4_BIT_MODE);
      Lcd_cursor(&lcd, 0, 0);
      Lcd_string(&lcd, message);  // Display the received data on the LCD
      Lcd_cursor(&lcd,1, 0);
      Lcd_string(&lcd, messageTwo);  // Display the received data on the LCD

//      Lcd_cursor(&lcd, 1, 0);
//      Lcd_string(&lcd, "Wait: ");
//      for (int x = 1; x <= 200; x++) {
//          Lcd_cursor(&lcd, 1, 6);
//          Lcd_int(&lcd, x);  //Display time since alert on second line
//          HAL_Delay(1000);  // Delay for 1 second
//      }
  }

  while (1) {
//	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 1){
//		  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
//	  }
	  switch(stateSend){
	  case 0:
		  LCD_Display("Confirm", "Signal");
		  if (HAL_UART_Receive(&huart1, rxData, 1, HAL_MAX_DELAY) == HAL_OK) {
		          	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
		                //rxData[sizeof(rxData) - 1] = '\0'; // Null-terminate received data
		          	  uint8_t checkOne = 1;
		          	  uint8_t checkTwo = 2;
		          	  uint8_t checkThree = 3;
		          	  uint8_t checkFour = 4;
		          	  if(rxData[0] == checkFour){
		          		  for(int i=0; i< 2;i++){
		          		  LCD_Display("Jamal Dantes", "Emerg Lv: 1");
		          		  HAL_Delay(3000);
		          		  LCD_Display("7 Loo Dr", "Emerg Lv: 1");
		          		  HAL_Delay(3000);
		          		LCD_Display("Age 32", "Emerg Lv: 1");
		          		HAL_Delay(3000);
		          		stateSend = 1;
		          		  }
		          	  }else if(rxData[0] == checkThree){
		          		for(int i=0; i< 2;i++){
		          		  LCD_Display("Jamal Dantes", "Emerg Lv: 2");
		          		  HAL_Delay(3000);
		          		  LCD_Display("7 Loo Dr", "Emerg Lv: 2");
		          		  HAL_Delay(3000);
		          		LCD_Display("Age 32", "Emerg Lv: 2");
		          		HAL_Delay(3000);
		          		stateSend = 1;
		          		}
		          	  }else if(rxData[0] == checkTwo){
		          		for(int i=0; i< 2;i++){
		          		  LCD_Display("Jamal Dantes", "Emerg Lv: 3");
		          		  HAL_Delay(3000);
		          		  LCD_Display("7 Loo Dr", "Emerg Lv: 3");
		          		  HAL_Delay(3000);
		          		LCD_Display("Age 32", "Emerg Lv: 3");
		          		HAL_Delay(3000);
		          		stateSend = 1;
		          	  }
		          	  }else if(rxData[0] == checkOne){
		          		for(int i=0; i< 2;i++){
		          		  LCD_Display("Jamal Dantes", "Emerg Lv: 4");
		          		  HAL_Delay(3000);
		          		  LCD_Display("7 Loo Dr", "Emerg Lv: 4");
		          		  HAL_Delay(3000);
		          		LCD_Display("Age 32", "Emerg Lv: 4");
		          		HAL_Delay(3000);
		          		stateSend = 1;
		          	  }
		          	  }
		  }
	  case 1:
		  if(stateSend == 1){
          	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
			  __NOP();
			  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 1){
				  	  	  LCD_Display("Confirm", "Signal");
			  			  stateSend = 2;
			  }
		  }
//		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 1){
//
//			  stateSend = 2;
//		  }
	  case 2:
		  if(stateSend == 2){
			  tx_buff[0] = 8;
			  HAL_UART_Transmit_IT(&huart1, tx_buff, 10);
			  if(HAL_UART_Receive(&huart1, rxData, 1, HAL_MAX_DELAY) == HAL_OK){
				  uint8_t checkSix = 6;
				  if(rxData[0] == checkSix){
					  stateSend = 0;
				  }
			  }
		  }
//	  case 2:
//		  __NOP();
//		  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
//		  HAL_UART_Transmit_IT(&huart1, tx_buff, 10);
//		  if(HAL_UART_Receive(&huart1, rxData, 1, 1000) == HAL_OK){
//			  stateSend = 0;
//		  }


//              LCD_Display(rxData); // Display data on the LCD



//              while (1) {
//                  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
//                      HAL_Delay(50); // Debounce delay                      if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
//                          HAL_UART_Transmit(&huart1, tx_buff, sizeof(tx_buff) - 1, HAL_MAX_DELAY);
//                          break; // Exit inner loop
//                      }
//                  }
              }
           }

}

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


  /* USER CODE END 3 */


/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 80;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : LD2_Pin PA6 PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */